name: InfraWeave GitOps

on:
  workflow_call:
    inputs:
      account_id:
        description: "AWS Account ID"
        required: true
        type: string
      environment:
        description: "InfraWeave environment (e.g., dev, prod)"
        required: true
        type: string
      region:
        description: "Region to use (default is us-west-2)"
        required: false
        type: string
        default: us-west-2

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  discover-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      has-changes: ${{ steps.discover.outputs.has_changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper diff

      - name: Create/Update PR comment with link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const commentBody = `## InfraWeave PR Status

            **Latest run:** \`#${{ github.run_number }}\`
            **Commit:** \`${{ github.sha }}\`

            View the complete summary with all infrastructure changes in the [workflow run details](${runUrl}).

            ---
            *This comment is automatically updated on each push.*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('InfraWeave PR Status')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Download InfraWeave CLI
        run: |
          curl -L -o infraweave https://github.com/infraweave-io/infraweave/releases/download/v0.0.94-rc.7/cli-linux-amd64
          chmod +x infraweave
          sudo mv infraweave /usr/local/bin

      - name: Discover manifest changes
        id: discover
        run: |
          echo "Discovering changed manifests..."

          # Let CLI auto-detect refs based on GitHub context
          matrix_json=$(PROVIDER=none \
            CURRENT_BRANCH="${{ github.ref_name }}" \
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}" \
            infraweave gitops diff)

          echo "Discovered changes:"
          echo "$matrix_json" | jq '.'

          # Check if we have any changes
          change_count=$(echo "$matrix_json" | jq '. | length')

          if [ "$change_count" -eq 0 ]; then
            echo "No infrastructure changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "Found $change_count infrastructure change(s)"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "matrix=$(echo "$matrix_json" | jq -c '{include: .}')" >> $GITHUB_OUTPUT
          fi

  apply-changes:
    needs: discover-changes
    if: needs.discover-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.discover-changes.outputs.matrix) }}

    name: ${{ matrix.kind }}/${{ matrix.name }} (${{ matrix.namespace }}) - ${{ matrix.action }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/infraweave-oidc-role-${{ inputs.environment }}
          aws-region: ${{ matrix.region }}

      - name: Download InfraWeave CLI
        run: |
          curl -L -o infraweave https://github.com/infraweave-io/infraweave/releases/download/v0.0.94-rc.7/cli-linux-amd64
          chmod +x infraweave
          sudo mv infraweave /usr/local/bin

      - name: Set repository path
        id: repo
        run: |
          # Convert repository to lowercase and replace slashes with hyphens for InfraWeave naming requirements
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          echo "path=github-${REPO_LOWER}/${{ matrix.namespace }}" >> $GITHUB_OUTPUT
          echo "Repository path: github-${REPO_LOWER}/${{ matrix.namespace }}"

      - name: Write manifest to file
        if: matrix.action != 'destroy' && matrix.action != 'rename'
        run: |
          mkdir -p /tmp
          cat << 'EOF' > /tmp/manifest.yaml
          ${{ matrix.content }}
          EOF
          echo "Manifest written to /tmp/manifest.yaml"
          cat /tmp/manifest.yaml

      - name: Apply infrastructure changes
        if: matrix.action == 'apply'
        run: |
          echo "Applying ${{ matrix.kind }}/${{ matrix.name }} to namespace ${{ matrix.namespace }}"
          infraweave apply ${{ steps.repo.outputs.path }} /tmp/manifest.yaml --follow 2>&1 | tee /tmp/output.txt

          {
            echo "### \`${{ matrix.kind }}/${{ matrix.name }}\` (\`${{ matrix.namespace }}\`)"
            grep -E "^Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to (destroy|remove)" /tmp/output.txt | head -1 || true
            echo ""
            echo "<details>"
            echo "<summary>View full apply details</summary>"
            echo ""
            echo '```terraform'
            sed -n '/^Terraform used the selected providers/,/^─────────────────────────────────────────────────────────────────────────────$/p' /tmp/output.txt
            echo '```'
            echo ""
            echo "</details>"
            echo ""
          } >> $GITHUB_STEP_SUMMARY

      - name: Plan infrastructure changes
        if: matrix.action == 'plan'
        run: |
          echo "Planning ${{ matrix.kind }}/${{ matrix.name }} in namespace ${{ matrix.namespace }}"
          infraweave plan ${{ steps.repo.outputs.path }} /tmp/manifest.yaml --follow ${{ join(matrix.flags, ' ') }} 2>&1 | tee /tmp/output.txt

          {
            echo "### \`${{ matrix.kind }}/${{ matrix.name }}\` (\`${{ matrix.namespace }}\`)"
            grep -E "^Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to (destroy|remove)" /tmp/output.txt | head -1 || echo "No plan summary found"
            echo ""
            echo "<details>"
            echo "<summary>View full plan details</summary>"
            echo ""
            echo '```terraform'
            sed -n '/^Terraform used the selected providers/,/^─────────────────────────────────────────────────────────────────────────────$/p' /tmp/output.txt
            echo '```'
            echo ""
            echo "</details>"
            echo ""
          } >> $GITHUB_STEP_SUMMARY

      - name: Destroy infrastructure
        if: matrix.action == 'destroy'
        run: |
          echo "Destroying ${{ matrix.kind }}/${{ matrix.name }} from namespace ${{ matrix.namespace }}"
          infraweave destroy ${{ steps.repo.outputs.path }} ${{ matrix.kind }}/${{ matrix.name }} --follow 2>&1 | tee /tmp/output.txt

          {
            echo "### \`${{ matrix.kind }}/${{ matrix.name }}\` (\`${{ matrix.namespace }}\`)"
            grep -E "^Destroy complete|^Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to (destroy|remove)" /tmp/output.txt | head -1 || true
            echo ""
            echo "<details>"
            echo "<summary>View full destroy details</summary>"
            echo ""
            echo '```terraform'
            sed -n '/^Terraform used the selected providers/,/^─────────────────────────────────────────────────────────────────────────────$/p' /tmp/output.txt
            echo '```'
            echo ""
            echo "</details>"
            echo ""
          } >> $GITHUB_STEP_SUMMARY

      - name: Handle rename
        if: matrix.action == 'rename'
        run: |
          echo "File renamed - no infrastructure changes needed"
          echo "The manifest file path changed from ${{ matrix.path }}, but infrastructure remains the same."

  summary:
    needs: [discover-changes, apply-changes]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Job Summary
        run: |
          echo "# InfraWeave GitOps Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.discover-changes.outputs.has-changes }}" == "true" ]; then
            echo "Infrastructure changes detected and processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[View detailed results above](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "No infrastructure changes detected in this PR" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.apply-changes.result }}" == "failure" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Some deployments failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
